;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; GNU GENERAL PUBLIC LICENSE ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; This program is free software; you can redistribute it and/or
;; modify it under the terms of the GNU General Public License
;; as published by the Free Software Foundation; either version 3
;; of the License, or (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this program; if not, write to the Free Software
;; Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.


;;;;;;;;;;;;;;;;;
;;; Warning:   ;;
;;;;;;;;;;;;;;;;;
;;
;; If you intend to run model with fewer than about 200 agents then the model can break
;; and go on forever.
;;
;; The model was intended to be run with between 300 and 390 agents and there is code
;; implemented to slow down the exponential convincing that breaks at sparser layouts
;;




;;;;;;;;;;;;;;;;;
;;; VARIABLES ;;;
;;;;;;;;;;;;;;;;;

globals [
  avg-%-similar     ;; the average proportion (across agents) of an agent's
                    ;; neighbours that are the same color as the agent.
  %-unconvinced  ;; percentage of unhappy agents

  #-blueConvinced; number of people flipped from blue to green
  #-whiteConvinced; number of people flipped from white to green

  #-totalGreen
  #-totalRed
]

turtles-own [
  convinced?         ;; indicates whether at least %-similar-wanted percent
                 ;; of my neighbours are the same colour as me.
  n-of-my-nbrs   ;; number of neighbours
  similar-nbrs   ;; number of neighbours with the same colour as me

  persuasiveness ;; percentage between 0 and 1
]

;;;;;;;;;;;;;;;;;;;;;;;;
;;; SETUP PROCEDURES ;;;
;;;;;;;;;;;;;;;;;;;;;;;;

to startup
  clear-all
  setup-agents
  do-plots-and-statistics
  reset-ticks
end



to setup-agents
  ;; Check if there are enough patches to fit all the agents
  if number-of-agents > count patches [
    user-message (word "This grid only has room for " (count patches) " moving agents.")
    stop
  ]

  ;; Clear the existing setup
  clear-all

  set #-blueConvinced 0
  set #-whiteConvinced 0

  ;; Create turtles without assigning colors yet
  set-default-shape turtles "person"
  create-turtles number-of-agents [
    set persuasiveness random-float 1  ;; Random persuasiveness
    ;; Assign the turtle to a random empty patch
    let target-patch one-of patches with [not any? turtles-on self]  ;; Find a random empty patch
    if target-patch != nobody [
      setxy [pxcor] of target-patch [pycor] of target-patch  ;; Move the turtle to the patch
    ]
    set color gray  ;; Explicitly set the initial color to gray (or default color)
  ]

  ;; Calculate how many turtles should be green based on the %-beginning-convinced parameter
  let num-green 0  ;; Default to 0

  if %-beginning-convinced > 0 [
    set num-green floor ((%-beginning-convinced / 100) * number-of-agents)  ;; Number of green turtles
  ]

  ;; Debugging: Check the number of green turtles
  print (word "Number of green turtles: " num-green)

  ;; Assign green color to 'num-green' turtles
  let green-turtles n-of num-green turtles  ;; Select the number of turtles to be green
  ask green-turtles [
    set color green
  ]

  ;; Now handle the remaining turtles that are not green
  let remaining-turtles turtles with [color != green]  ;; Only turtles that are not green
  print (word "Remaining turtles (not green): " count remaining-turtles)

  ;; Assign remaining colors (cyan, yellow, blue, white)
  let colors [cyan yellow blue white]  ;; Define the remaining colors
  ask remaining-turtles [
    set color item (random 4) colors  ;; Randomly assign one of the remaining colors
  ]

  ;; Optional: Perform an action to update happiness or any other behavior
  ask turtles [
    update-happiness
  ]

  reset-ticks
end



to check-turtle-colors
  let num-green count turtles with [color = green]  ;; Count green turtles
  let num-red count turtles with [color = red]  ;; Count red turtles
  let num-total count turtles  ;; Count all turtles

  ;; Calculate the percentage of green turtles
  if num-total > 0 [
    let percent-green round((num-green / num-total) * 100)
    output-print (word "Green: " percent-green "%")
]
end

;;;;;;;;;;;;;;;;;;;;;;
;;; MAIN PROCEDURE ;;;
;;;;;;;;;;;;;;;;;;;;;;



to go
  ;; Check if all turtles are either green or red
  if not any? turtles with [color != green and color != red] [
    check-turtle-colors
    stop  ;; Stop the simulation if no turtles are left with colors other than green or red

  ]

  ;; Move turtles randomly and try to convince neighbors
  ask turtles [
    move  ;; Move the turtle randomly
    convince  ;; Attempt to convince neighbors
  ]

    ;; Now, update the total counts after color changes
  set #-totalGreen count turtles with [color = green]
  set #-totalRed count turtles with [color = red]

  print (word "Number of green turtles: " #-totalGreen) ;; Print the current number of green turtles
  print (word "Number of red turtles: " #-totalRed) ;; Print the current number of green turtles

  output-winner

  do-plots-and-statistics  ;; Update the plots and stats
  tick  ;; Increment the tick count
end



;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; AGENTS' PROCEDURES ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;



to move
  ;; Move to a random neighboring patch
  move-to one-of patches with [not any? turtles-here]
end



to update-happiness
  let my-nbrs (turtles-on neighbors)
  set n-of-my-nbrs (count my-nbrs)
  set similar-nbrs (count my-nbrs with [color = [color] of myself])
  set convinced? similar-nbrs >= (%-similar-wanted * n-of-my-nbrs / 100)
end




to convince
  if color = green [  ;; Only green turtles try to convince others
    let my-nbrs turtles-on neighbors  ;; Get all neighboring turtles

    ;; Randomly choose half of the neighbors to try to persuade
    let nbrs-to-convince n-of (count my-nbrs / 8) my-nbrs

    ;; Loop through all neighbors and try to persuade them
    ask nbrs-to-convince [
      ;; Only act if the neighbor is not already green or red
      if color != green and color != red [
        let persuasion-chance persuasiveness  ;; Start with the green turtle's persuasiveness

        ;; Modify persuasiveness based on the neighbor's color
        if color = cyan [
          set persuasion-chance persuasiveness * 1.5 ;; Green turtles might have slightly more power over cyan turtles
        ]
        if color = yellow [
          set persuasion-chance persuasiveness * 0.5  ;; Green turtles might have less power over yellow turtles
        ]
        if color = blue [
          ;; If blue turtles have been convinced more than white, increase persuasion chance
          set persuasion-chance persuasiveness * (#-blueConvinced / (#-whiteConvinced + 0.00001))
        ]
        if color = white [
          ;; If white turtles have been convinced more than blue, increase persuasion chance
          set persuasion-chance persuasiveness * (#-whiteConvinced / (#-blueConvinced + 0.00001))
        ]

        ;; Now, determine whether the neighbor changes color
        let rand-value random-float 1  ;; Generate a single random number

        if rand-value < persuasion-chance [  ;; If random value is less than persuasion-chance, neighbor turns green
          set color green
          ;; Update counters for convinced turtles
          if color = blue [ set #-blueConvinced #-blueConvinced + 1 ]
          if color = white [ set #-whiteConvinced #-whiteConvinced + 1 ]
        ]
        if rand-value >= persuasion-chance [  ;; Otherwise, the neighbor turns red
          set color red
        ]
      ]
    ]
  ]
end








;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; PLOTS & STATISTICS ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;



to do-plots-and-statistics
  ;; Clear the plot at the start of each tick to avoid old data from accumulating
  clear-plot

  let num-unconvinced count turtles with [color != green and color != red]

  ;; Plot the number of green turtles in the "Green Turtles" pen
  set-current-plot "Green Turtles"
  set-current-plot-pen "Green"
  plot #-totalGreen  ;; Plot the number of green turtles

  ;; Plot the number of red turtles in the "Red Turtles" pen
  set-current-plot "Red Turtles"
  set-current-plot-pen "Red"
  plot #-totalRed  ;; Plot the number of red turtles

  ;; Update the percentage of unconvinced turtles
  set %-unconvinced 100 * num-unconvinced / (count turtles)

  ;; Plot the percentage of unconvinced turtles
  set-current-plot "Unconvinced Turtles"
  plot %-unconvinced

  ;; Update the average % similarity of neighbors
  let list-of-%-similar ([similar-nbrs / n-of-my-nbrs] of turtles with [n-of-my-nbrs > 0])
  set avg-%-similar 100 * mean list-of-%-similar  ;; Calculate the average % similarity

  ;; Update the histogram of % similarity of neighbors
  set-current-plot "% Similarity Histogram"
  histogram list-of-%-similar

end

to output-winner
  ;; Check the number of green and red turtles
  let num-green count turtles with [color = green]
  let num-red count turtles with [color = red]

  ;; Determine the winner
  if num-green > num-red [
    output-print "Winner: Green"
  ]
  if num-red > num-green [
    output-print "Winner: Red"
  ]
  if num-red = num-green [
    output-print "It's a tie!"
  ]
end



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;      Note on Process       ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; While all of the logic is origional work,
;; this model was made as the first netLogo model created by the author,
;; and due to unfamiliarity with the language, used "Schelling/Sakoda segragation" as a template.
;; As in began with schelling-sakota and then began altering it to achieve this final product
;; So as to begin with something working and tweak then spend unnessary time messing with trying
;; to get some working thing out of nothing in an unfamiliar programming language and envoirnment.
;;
;; This is allowed under the origional model's GNU public license so long as this model is also
;; made available in the same way by the same liscense as it is.
;;
;; As such there is some vestigial code and interface elements. Things that don't seem to matter
;; for this model other than if I take them out they break something I don't feel like troubleshooting
;; or (on the interface side) they could be removed but would mess up the spacing and would make things
;; look worse.
;;
;; In general, we wanted a working final product, which we could use to find interesting results
;; and anything that isn't completely necessary to the functioning of the model but is also not
;; harming the model in any way was left as is.
;;
;; Consider it a sylistic choice, or laziness, or a deadline, whatever floats your boat.
